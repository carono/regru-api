<?php
namespace carono\regru;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use GuzzleHttp\Client;

class Parser
{
    public static $requestParamRename = [
        'folder_name или folder_id' => 'folder',
        'new_folder_name'           => 'newFolder'
    ];

    protected function requiredSort($data)
    {
        return !$data['required'];
    }

    protected function ucfirst_utf8($str)
    {
        return mb_substr(mb_strtoupper($str, 'utf-8'), 0, 1, 'utf-8') . mb_substr($str, 1, mb_strlen($str) - 1, 'utf-8');
    }

    public static function processAbsClient()
    {
        $html = self::getDocContent();
        $query = \phpQuery::newDocument($html);
        $json = [];
        foreach ($query->find('#common_functions_list')->parent()->find('tr') as $tr) {
            $tr = pq($tr);
            if ($id = $tr->find('a')->attr('href')) {
                $section = $query->find($id)->parent();

                $name = trim($tr->find('a')->text());
                $description = trim($tr->find('td')->eq(1)->text());
                $access = trim($tr->find('td')->eq(2)->text());
                $json[$name] = ['description' => $description, 'access' => $access];

                $request = $section->find('h5:contains("Поля запроса")')->next('table');
                $response = $section->find('h5:contains("Поля ответа")')->next('table');

                if (!$request->html()) {
                    $request = $section->find('h5:contains("Поля запроса")')->next('p');
                    $requestAsParam = true;
                } else {
                    $requestAsParam = false;
                }
                ////
//                if ($name == 'get_service_id') {
//                    var_dump($request->htmlOuter());
//                }
                ////

                $json[$name]['request'] = $json[$name]['response'] = [];
                $json[$name]['example_url'] = array_filter(explode("\n", $section->find('.sample-request')->find('a')->text()));
                $json[$name]['source'] = "https://www.reg.ru/support/help/api2$id";

                $arr = ['request' => $request, 'response' => $response];

                foreach ($arr as $attr => $q) {
                    foreach ($q->find('tr') as $attrTr) {
                        $attrTr = pq($attrTr);
                        $attrName = trim($attrTr->find('td:first-child')->text());
                        if ($attr == "request") {
                            $attrName = self::renameRequestParam($attrName);
                            if (preg_match('/[а-я]/ui', $attrName)) {
                                continue;
                            }
                            if (strpos($attrName, '...') !== false) {
                                $attrName = str_replace('0', 'X', explode('...', $attrName)[0]);
                            }
                        }
                        $attrNames = array_filter(explode("\n", $attrName));
                        foreach ($attrNames as $elem) {
                            $attrDescription = trim($attrTr->find('td:last-child')->text());
                            $data = [
                                'required' => !self::isOptionalParam('', $attrDescription),
                                'default'  => null
                            ];
                            $json[$name][$attr][$elem] = $data;
                        }
                    }
//                    if ($requestAsParam) {
                        foreach ($q->find('a') as $a) {
                            $href = pq($a)->attr('href');
                            $description = pq($a)->text();
                            $class = self::formClassName($href);
                            $generator = self::processParamClass($class, $href, 'params/common');
                            $generator->class->addComment($description);
                            $generator->process();
                        }
//                    }
//                    if ($name == 'get_service_id') {
//                        exit;
//                        var_dump($request->htmlOuter());
//                    }
                }
            }
        }

        file_put_contents('api.json', json_encode($json));

        $f = new PhpFile();
        $f->addNamespace('carono\regru');


        $class = new ClassType('absClient');

        $class->addComment("Do not edit this file, it is automatically generated and can be overwritten in the future !!!");
        $class->addComment("Generator: parser_api.php");
        $class->addComment("@source https://www.reg.ru/support/help/api2");
        $class->addExtend('BaseClient');
        $class->setAbstract(true);

        $json = json_decode(file_get_contents('api.json'), true);
        foreach ($json as $api => $value) {
            $array = array_map('ucfirst', preg_split("#[_/]+#", $api));
            $array[0] = lcfirst($array[0]);
            uasort($value['request'], 'self::requiredSort');
            $method = join('', $array);
            $m = $class->addMethod($method)->addComment('');
            $m->addComment(self::ucfirst_utf8($value['description']) . "\n");
            $m->addComment('@see ' . $value['source']);
            if ($value['example_url']) {
                foreach ($value['example_url'] as $url) {
                    $m->addComment("@link $url");
                }
            }
            $m->addComment("");
            $params = [];
            foreach ($value['request'] as $param => $data) {
                $params[] = "'$param'" . ' => ' . '$' . $param;
                if ($data['required']) {
                    $m->addComment("@var mixed \$$param");
                    $m->addParameter($param);
                } else {
                    $m->addComment("@var mixed|null \$$param");
                    $m->addParameter($param, $data['default']);
                }
            }
            $m->addComment("");
            $m->addComment('@return mixed');
            $export = self::arrayAsPhpVar($params);
            $body = <<<PHP
\$params = $export;
return \$this->request('$api', \$params);
PHP;
            $m->setBody($body);
        }

        $generator = new FileGenerator();
        $generator->class = $class;
        $generator->file = $f;
        $generator->className = 'absClient';
        $generator->process();
        return $generator;
    }

    public static function processServiceParams()
    {
        $query = \phpQuery::newDocument(self::getDocContent());
        $dir = 'params/service';
        foreach ($query->find('h5:contains("srv_"') as $h5) {
            $text = pq($h5)->text();
            preg_match("/\(([\w_]+)\)/", $text, $match);
            if (isset($match[1])) {
                $srvName = $match[1];
                $generator = Parser::processParamClass(self::formClassName($srvName) . 'Param', "h5:contains('$srvName')", $dir);
                $generator->class->addComment("@see https://www.reg.ru/support/help/api2#service_create");
                $generator->process();
            }
        }
        Parser::processParamClass(self::formClassName('srv_rs_joomla'), "h5:contains('srv_rs_joomla')", $dir);
        Parser::processParamClass(self::formClassName('srv_rs_wordpress'), "h5:contains('srv_rs_wordpress')", $dir);
    }

    public static function processParamClass($className, $selector, $dir = DIRECTORY_SEPARATOR)
    {
        if (strpos($className, 'Param') === false) {
            $className .= 'Param';
        }
        $html = self::getDocContent();
        $query = \phpQuery::newDocument($html);
        $f = new PhpFile();
        $namespace = rtrim(join('\\', preg_split("#[\\/]+#", $dir)), '\\');
        $f->addNamespace('carono\regru' . ($namespace ? "\\" . $namespace : ''));
        $class = new ClassType(ucfirst($className));
        $class->addExtend('\carono\regru\BaseParam');
        if (strpos($selector, '#') === 0) {
            $class->addComment("@see https://www.reg.ru/support/help/api2$selector");
        }
        $required = [];
        $s = $query->find($selector);
        if (strpos($s->htmlOuter(), '<h5>') !== false) {
            $class->addComment($s->text());
        }
        foreach ($s->nextAll('table')->eq(0)->find('tr') as $tr) {
            $tr = pq($tr);
            if ($rawProperty = $tr->find('td:first-child')->text()) {
                $property = self::clearParam($rawProperty);
                $description = trim($tr->find('td:last-child')->text());
                $p = $class->addProperty($property);
                if (self::isDeprecatedParam($rawProperty, $description)) {
                    $p->addComment('@deprecated');
                }
                if (self::isRequiredParam($rawProperty, $description)) {
                    $required[] = $property;
                }
                $p->addComment($description);
            }
        }
        if ($required) {
            $class->addProperty('required', $required);
        }
        $classDirectory = rtrim(__DIR__ . DIRECTORY_SEPARATOR . $dir, DIRECTORY_SEPARATOR);
        if (!is_dir($classDirectory)) {
            mkdir($classDirectory, 0777, true);
        }

        $generator = new FileGenerator();
        $generator->file = $f;
        $generator->class = $class;
        $generator->folder = $classDirectory;
        $generator->process();
        return $generator;
    }

    public function isDeprecatedParam($rawProperty, $description = null)
    {
        return strpos($rawProperty, 'deprecated') !== false;
    }

    public function isOptionalParam($rawProperty, $description = null)
    {
        return mb_stripos($description . ' ' . $rawProperty, 'Необязательн', null, 'utf-8') !== false;
    }

    public function isRequiredParam($rawProperty, $description = null)
    {
        if (!self::isOptionalParam($rawProperty, $description)) {
            return mb_stripos($description . ' ' . $rawProperty, 'обязательн', null, 'utf-8') !== false;
        } else {
            return false;
        }
    }

    public function clearParam($param)
    {
        $param = preg_replace('/\(deprecated\)/', '', $param);
        return trim($param);
    }

    protected function arrayAsPhpVar($array)
    {
        $export = join(",\n\t", $array);
        if ($array) {
            $result = "[\n\t$export\n]";
        } else {
            $result = "[]";
        }
        return $result;
    }

    public static function getDocContent()
    {
        //$guzzle = new Client();
        //$response = $guzzle->get('https://www.reg.ru/support/help/api2');
        //$html = $response->getBody()->getContents();
        //file_put_contents('test.html', $html);
        return file_get_contents('test.html');
    }

    protected static function formClassName($string)
    {
        $class = ucfirst(self::formMethodName($string));
        $class = strtr($class, ["Common" => '', 'Params' => '']);
        $class = preg_replace('/ions$/ui', 'ion', $class);
        $class = preg_replace('/nts$/ui', 'nt', $class);
        $class = preg_replace('/ths$/ui', 'th', $class);
        return $class;
    }

    protected static function formMethodName($string)
    {
        $string = preg_replace('/[^a-z_]/i', '', $string);
        $array = array_map('ucfirst', preg_split("#[_/]+#", $string));
        $array[0] = lcfirst($array[0]);
        return join('', $array);
    }

    protected static function renameRequestParam($string)
    {
        foreach (self::$requestParamRename as $part => $newName) {
            if (mb_stripos($string, $part, null, 'utf-8') !== false) {
                return $newName;
            }
        }
        return $string;
    }
}
